/* tslint:disable */
/* eslint-disable */
/**
 * BookBarter.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AuthorDtoPaginatedResult } from '../models';
// @ts-ignore
import type { CreateAuthorCommand } from '../models';
// @ts-ignore
import type { GetPagedAuthorsQuery } from '../models';
/**
 * AuthorsApi - axios parameter creator
 * @export
 */
export const AuthorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GetPagedAuthorsQuery} [getPagedAuthorsQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorsPagedPost: async (getPagedAuthorsQuery?: GetPagedAuthorsQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authors/paged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getPagedAuthorsQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAuthorCommand} [createAuthorCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorsPost: async (createAuthorCommand?: CreateAuthorCommand, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Authors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAuthorCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorsApi - functional programming interface
 * @export
 */
export const AuthorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GetPagedAuthorsQuery} [getPagedAuthorsQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorsPagedPost(getPagedAuthorsQuery?: GetPagedAuthorsQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDtoPaginatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorsPagedPost(getPagedAuthorsQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.apiAuthorsPagedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAuthorCommand} [createAuthorCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthorsPost(createAuthorCommand?: CreateAuthorCommand, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorsPost(createAuthorCommand, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorsApi.apiAuthorsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorsApi - factory interface
 * @export
 */
export const AuthorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorsApiFp(configuration)
    return {
        /**
         * 
         * @param {GetPagedAuthorsQuery} [getPagedAuthorsQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorsPagedPost(getPagedAuthorsQuery?: GetPagedAuthorsQuery, options?: RawAxiosRequestConfig): AxiosPromise<AuthorDtoPaginatedResult> {
            return localVarFp.apiAuthorsPagedPost(getPagedAuthorsQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAuthorCommand} [createAuthorCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthorsPost(createAuthorCommand?: CreateAuthorCommand, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiAuthorsPost(createAuthorCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorsApi - object-oriented interface
 * @export
 * @class AuthorsApi
 * @extends {BaseAPI}
 */
export class AuthorsApi extends BaseAPI {
    /**
     * 
     * @param {GetPagedAuthorsQuery} [getPagedAuthorsQuery] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public apiAuthorsPagedPost(getPagedAuthorsQuery?: GetPagedAuthorsQuery, options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).apiAuthorsPagedPost(getPagedAuthorsQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAuthorCommand} [createAuthorCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorsApi
     */
    public apiAuthorsPost(createAuthorCommand?: CreateAuthorCommand, options?: RawAxiosRequestConfig) {
        return AuthorsApiFp(this.configuration).apiAuthorsPost(createAuthorCommand, options).then((request) => request(this.axios, this.basePath));
    }
}

