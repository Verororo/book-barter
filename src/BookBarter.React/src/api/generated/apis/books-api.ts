/* tslint:disable */
/* eslint-disable */
/**
 * BookBarter.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  type RequestArgs,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from '../base';
// @ts-ignore
import type { BookDto } from '../models';
// @ts-ignore
import type { BookDtoPaginatedResult } from '../models';
// @ts-ignore
import type { BookForModerationDtoPaginatedResult } from '../models';
// @ts-ignore
import type { CreateBookCommand } from '../models';
// @ts-ignore
import type { GetPagedBooksForModerationQuery } from '../models';
// @ts-ignore
import type { GetPagedBooksQuery } from '../models';
// @ts-ignore
import type { UpdateBookCommand } from '../models';
/**
 * BooksApi - axios parameter creator
 * @export
 */
export const BooksApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdApprovePut: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiBooksIdApprovePut', 'id', id);
      const localVarPath = `/api/Books/{id}/approve`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiBooksIdDelete', 'id', id);
      const localVarPath = `/api/Books/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiBooksIdGet', 'id', id);
      const localVarPath = `/api/Books/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {UpdateBookCommand} [updateBookCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdPut: async (
      id: number,
      updateBookCommand?: UpdateBookCommand,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('apiBooksIdPut', 'id', id);
      const localVarPath = `/api/Books/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateBookCommand,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GetPagedBooksForModerationQuery} [getPagedBooksForModerationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksPagedModeratedPost: async (
      getPagedBooksForModerationQuery?: GetPagedBooksForModerationQuery,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Books/paged/moderated`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        getPagedBooksForModerationQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {GetPagedBooksQuery} [getPagedBooksQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksPagedPost: async (
      getPagedBooksQuery?: GetPagedBooksQuery,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Books/paged`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        getPagedBooksQuery,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateBookCommand} [createBookCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksPost: async (
      createBookCommand?: CreateBookCommand,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Books`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createBookCommand,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BooksApi - functional programming interface
 * @export
 */
export const BooksApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BooksApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksIdApprovePut(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiBooksIdApprovePut(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksIdApprovePut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiBooksIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksIdDelete']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksIdGet(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksIdGet']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {UpdateBookCommand} [updateBookCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksIdPut(
      id: number,
      updateBookCommand?: UpdateBookCommand,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksIdPut(
        id,
        updateBookCommand,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksIdPut']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {GetPagedBooksForModerationQuery} [getPagedBooksForModerationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksPagedModeratedPost(
      getPagedBooksForModerationQuery?: GetPagedBooksForModerationQuery,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BookForModerationDtoPaginatedResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiBooksPagedModeratedPost(
          getPagedBooksForModerationQuery,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksPagedModeratedPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {GetPagedBooksQuery} [getPagedBooksQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksPagedPost(
      getPagedBooksQuery?: GetPagedBooksQuery,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BookDtoPaginatedResult>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiBooksPagedPost(
          getPagedBooksQuery,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksPagedPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateBookCommand} [createBookCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiBooksPost(
      createBookCommand?: CreateBookCommand,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiBooksPost(
        createBookCommand,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['BooksApi.apiBooksPost']?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * BooksApi - factory interface
 * @export
 */
export const BooksApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = BooksApiFp(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdApprovePut(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiBooksIdApprovePut(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiBooksIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BookDto> {
      return localVarFp
        .apiBooksIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {UpdateBookCommand} [updateBookCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksIdPut(
      id: number,
      updateBookCommand?: UpdateBookCommand,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiBooksIdPut(id, updateBookCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {GetPagedBooksForModerationQuery} [getPagedBooksForModerationQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksPagedModeratedPost(
      getPagedBooksForModerationQuery?: GetPagedBooksForModerationQuery,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BookForModerationDtoPaginatedResult> {
      return localVarFp
        .apiBooksPagedModeratedPost(getPagedBooksForModerationQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {GetPagedBooksQuery} [getPagedBooksQuery]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksPagedPost(
      getPagedBooksQuery?: GetPagedBooksQuery,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BookDtoPaginatedResult> {
      return localVarFp
        .apiBooksPagedPost(getPagedBooksQuery, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateBookCommand} [createBookCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiBooksPost(
      createBookCommand?: CreateBookCommand,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<number> {
      return localVarFp
        .apiBooksPost(createBookCommand, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BooksApi - object-oriented interface
 * @export
 * @class BooksApi
 * @extends {BaseAPI}
 */
export class BooksApi extends BaseAPI {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksIdApprovePut(id: number, options?: RawAxiosRequestConfig) {
    return BooksApiFp(this.configuration)
      .apiBooksIdApprovePut(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return BooksApiFp(this.configuration)
      .apiBooksIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksIdGet(id: number, options?: RawAxiosRequestConfig) {
    return BooksApiFp(this.configuration)
      .apiBooksIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {UpdateBookCommand} [updateBookCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksIdPut(
    id: number,
    updateBookCommand?: UpdateBookCommand,
    options?: RawAxiosRequestConfig,
  ) {
    return BooksApiFp(this.configuration)
      .apiBooksIdPut(id, updateBookCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GetPagedBooksForModerationQuery} [getPagedBooksForModerationQuery]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksPagedModeratedPost(
    getPagedBooksForModerationQuery?: GetPagedBooksForModerationQuery,
    options?: RawAxiosRequestConfig,
  ) {
    return BooksApiFp(this.configuration)
      .apiBooksPagedModeratedPost(getPagedBooksForModerationQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {GetPagedBooksQuery} [getPagedBooksQuery]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksPagedPost(
    getPagedBooksQuery?: GetPagedBooksQuery,
    options?: RawAxiosRequestConfig,
  ) {
    return BooksApiFp(this.configuration)
      .apiBooksPagedPost(getPagedBooksQuery, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateBookCommand} [createBookCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BooksApi
   */
  public apiBooksPost(
    createBookCommand?: CreateBookCommand,
    options?: RawAxiosRequestConfig,
  ) {
    return BooksApiFp(this.configuration)
      .apiBooksPost(createBookCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
